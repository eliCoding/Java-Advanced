
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Elmira
 */
public class Quiz1IceCreamSelector extends javax.swing.JFrame {

    File currentFile;

    /**
     * Creates new form Quiz1IceCreamSelector
     */
    public Quiz1IceCreamSelector() {

        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        FileNameExtensionFilter ff = new FileNameExtensionFilter("Text files (*.ord)", "ord");
        fileChooser.addChoosableFileFilter(ff);
        fileChooser.setFileFilter(ff);
        fileChooserOpen = new javax.swing.JFileChooser();
        lbName = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lblScopeSize = new javax.swing.JLabel();
        rbSmall = new javax.swing.JRadioButton();
        rbLarge = new javax.swing.JRadioButton();
        rbmedium = new javax.swing.JRadioButton();
        lblTopping = new javax.swing.JLabel();
        ckChocolate = new javax.swing.JCheckBox();
        ckSprinkle = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        dlType = new javax.swing.JComboBox<>();
        btnAdd1 = new javax.swing.JButton();
        btnAdd2 = new javax.swing.JButton();
        btnAdd3 = new javax.swing.JButton();
        btnAdd4 = new javax.swing.JButton();
        lblOrders = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miLoadFlavours = new javax.swing.JMenuItem();
        miSaveOrder = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();

        FileNameExtensionFilter ff1 = new FileNameExtensionFilter("Text files (.flav)", ".flav");
        fileChooserOpen.addChoosableFileFilter(ff1);
        fileChooserOpen.setFileFilter(ff1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                WindowClosing(evt);
            }
        });

        lbName.setText("Name");

        lblScopeSize.setText("Scope Size");

        buttonGroup1.add(rbSmall);
        rbSmall.setSelected(true);
        rbSmall.setText("Small");

        buttonGroup1.add(rbLarge);
        rbLarge.setText("Large");

        buttonGroup1.add(rbmedium);
        rbmedium.setText("Medium");

        lblTopping.setText("Topping");

        ckChocolate.setSelected(true);
        ckChocolate.setText("Chocolate");

        ckSprinkle.setText("Sprinkles");

        jLabel4.setText("Type");

        dlType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Waffle", "Sweet", "Choco" }));

        btnAdd1.setText("Add1");
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1ActionPerformed(evt);
            }
        });

        btnAdd2.setText("Add2");
        btnAdd2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd2ActionPerformed(evt);
            }
        });

        btnAdd3.setText("Add3");
        btnAdd3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd3ActionPerformed(evt);
            }
        });

        btnAdd4.setText("Add4");
        btnAdd4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd4ActionPerformed(evt);
            }
        });

        lblOrders.setText("Orders");

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jMenu1.setText("File");

        miLoadFlavours.setText("Load Flavours");
        miLoadFlavours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLoadFlavoursActionPerformed(evt);
            }
        });
        jMenu1.add(miLoadFlavours);

        miSaveOrder.setText("Save Orders as...");
        miSaveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveOrderActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveOrder);
        jMenu1.add(jSeparator1);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblScopeSize)
                    .addComponent(lblTopping))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSmall)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ckChocolate)
                        .addGap(18, 18, 18)
                        .addComponent(ckSprinkle)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(67, 67, 67)
                                    .addComponent(dlType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(rbmedium)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lbName)
                                            .addGap(50, 50, 50)
                                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addComponent(rbLarge))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnAdd1)
                                    .addGap(12, 12, 12)
                                    .addComponent(btnAdd2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnAdd3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnAdd4))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addComponent(lblOrders))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbName)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScopeSize)
                    .addComponent(rbSmall)
                    .addComponent(rbLarge)
                    .addComponent(rbmedium))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckChocolate)
                    .addComponent(ckSprinkle)
                    .addComponent(lblTopping))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dlType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd3)
                    .addComponent(btnAdd4)
                    .addComponent(btnAdd2)
                    .addComponent(btnAdd1))
                .addGap(36, 36, 36)
                .addComponent(lblOrders)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miLoadFlavoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLoadFlavoursActionPerformed
        // TODO add your handling code here:
        if (fileChooserOpen.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                currentFile = fileChooserOpen.getSelectedFile();

                String content = new Scanner(currentFile).useDelimiter("\\Z").next();
                textArea.setText(content);

            } catch (IOException ex) {
                currentFile = null;
                JOptionPane.showMessageDialog(this,
                        "Unable to read file contents from " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }


    }//GEN-LAST:event_miLoadFlavoursActionPerformed


    private void miSaveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveOrderActionPerformed
        // TODO add your handling code here:
        ScopeSize size;
        if (rbSmall.isSelected()) {
            size = ScopeSize.small;
        } else if (rbmedium.isSelected()) {
            size = ScopeSize.Medium;
        } else if (rbLarge.isSelected()) {
            size = ScopeSize.large;
        } else {
            JOptionPane.showMessageDialog(this,
                    "Unknown radio box selection",
                    "Internal error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        ArrayList<String> topping = new ArrayList<>();
        if (ckChocolate.isSelected()) {
            topping.add("Chocolate");
        }
        if (ckSprinkle.isSelected()) {
            topping.add("Sprinkle");
        }
        String toppingList = "";
        for (String t : topping) {
            if (toppingList.equals("")) {
                toppingList = t;
            } else {
                toppingList += "," + t;
            }
        }

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile();
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
                pw.println(tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem());

                if (fileChooser.getFileFilter() != fileChooser.getAcceptAllFileFilter()) {
                    if (!currentFile.getAbsolutePath().endsWith(".ord")) {

                        currentFile = new File(currentFile.getAbsoluteFile() + ".ord");

                    }
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

        }

    }//GEN-LAST:event_miSaveOrderActionPerformed

    private void btnAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1ActionPerformed
        // TODO add your handling code here:
        ScopeSize size;
        if (rbSmall.isSelected()) {
            size = ScopeSize.small;
        } else if (rbmedium.isSelected()) {
            size = ScopeSize.Medium;
        } else if (rbLarge.isSelected()) {
            size = ScopeSize.large;
        } else {
            JOptionPane.showMessageDialog(this,
                    "Unknown radio box selection",
                    "Internal error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        ArrayList<String> topping = new ArrayList<>();
        if (ckChocolate.isSelected()) {
            topping.add("Chocolate");
        }
        if (ckSprinkle.isSelected()) {
            topping.add("Sprinkle");
        }
        String toppingList = "";
        for (String t : topping) {
            if (toppingList.equals("")) {
                toppingList = t;
            } else {
                toppingList += "," + t;
            }
        }

        btnAdd1.setText("Vanila");
        String name = tfName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "you forgot to enter your name",
                    "name missingF",
                    JOptionPane.WARNING_MESSAGE);

        } else {

            String msg = tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd1.getText() + "\n";
            //   textArea.setText(msg);
            textArea.append(msg);

            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
                pw.println(tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd1.getText() + "\n");

                if (fileChooser.getFileFilter() != fileChooser.getAcceptAllFileFilter()) {
                    if (!currentFile.getAbsolutePath().endsWith(".ord")) {

                        currentFile = new File(currentFile.getAbsoluteFile() + ".ord");

                    }
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

    }//GEN-LAST:event_btnAdd1ActionPerformed

    private void btnAdd2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd2ActionPerformed
        // TODO add your handling code here:
        ScopeSize size;
        if (rbSmall.isSelected()) {
            size = ScopeSize.small;
        } else if (rbmedium.isSelected()) {
            size = ScopeSize.Medium;
        } else if (rbLarge.isSelected()) {
            size = ScopeSize.large;
        } else {
            JOptionPane.showMessageDialog(this,
                    "Unknown radio box selection",
                    "Internal error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        ArrayList<String> topping = new ArrayList<>();
        if (ckChocolate.isSelected()) {
            topping.add("Chocolate");
        }
        if (ckSprinkle.isSelected()) {
            topping.add("Sprinkle");
        }
        String toppingList = "";
        for (String t : topping) {
            if (toppingList.equals("")) {
                toppingList = t;
            } else {
                toppingList += "," + t;
            }
        }

        btnAdd2.setText("Creamy");
        String name = tfName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "you forgot to enter your name",
                    "name missingF",
                    JOptionPane.WARNING_MESSAGE);

        } else {

            String msg = tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd2.getText() + "\n";
            // textArea.setText(msg);
            textArea.append(msg);
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
                pw.println(tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd2.getText() + "\n");

                if (fileChooser.getFileFilter() != fileChooser.getAcceptAllFileFilter()) {
                    if (!currentFile.getAbsolutePath().endsWith(".ord")) {

                        currentFile = new File(currentFile.getAbsoluteFile() + ".ord");

                    }
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnAdd2ActionPerformed

    private void btnAdd3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd3ActionPerformed
        // TODO add your handling code here:
        ScopeSize size;
        if (rbSmall.isSelected()) {
            size = ScopeSize.small;
        } else if (rbmedium.isSelected()) {
            size = ScopeSize.Medium;
        } else if (rbLarge.isSelected()) {
            size = ScopeSize.large;
        } else {
            JOptionPane.showMessageDialog(this,
                    "Unknown radio box selection",
                    "Internal error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        ArrayList<String> topping = new ArrayList<>();
        if (ckChocolate.isSelected()) {
            topping.add("Chocolate");
        }
        if (ckSprinkle.isSelected()) {
            topping.add("Sprinkle");
        }
        String toppingList = "";
        for (String t : topping) {
            if (toppingList.equals("")) {
                toppingList = t;
            } else {
                toppingList += "," + t;
            }
        }

        btnAdd3.setText("Cofee");
        String name = tfName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "you forgot to enter your name",
                    "name missingF",
                    JOptionPane.WARNING_MESSAGE);

        } else {

            String msg = tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd3.getText() + "\n";
            // textArea.setText(msg);
            textArea.append(msg);
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
                pw.println(tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd3.getText() + "\n");

                if (fileChooser.getFileFilter() != fileChooser.getAcceptAllFileFilter()) {
                    if (!currentFile.getAbsolutePath().endsWith(".ord")) {

                        currentFile = new File(currentFile.getAbsoluteFile() + ".ord");

                    }
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnAdd3ActionPerformed

    private void btnAdd4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd4ActionPerformed
        // TODO add your handling code here:
        ScopeSize size;

        if (rbSmall.isSelected()) {
            size = ScopeSize.small;
        } else if (rbmedium.isSelected()) {
            size = ScopeSize.Medium;
        } else if (rbLarge.isSelected()) {
            size = ScopeSize.large;
        } else {
            JOptionPane.showMessageDialog(this,
                    "Unknown radio box selection",
                    "Internal error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        ArrayList<String> topping = new ArrayList<>();
        if (ckChocolate.isSelected()) {
            topping.add("Chocolate");
        }
        if (ckSprinkle.isSelected()) {
            topping.add("Sprinkle");
        }
        String toppingList = "";
        for (String t : topping) {
            if (toppingList.equals("")) {
                toppingList = t;
            } else {
                toppingList += "," + t;
            }
        }

        btnAdd4.setText("heavy Cream");
        String name = tfName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "you forgot to enter your name",
                    "name missingF",
                    JOptionPane.WARNING_MESSAGE);

        } else {

            String msg = tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd4.getText() + "\n";
            // textArea.setText(msg);
            textArea.append(msg);
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
                pw.println(tfName.getText() + ";" + size + ";" + toppingList + ";" + dlType.getSelectedItem() + ";" + btnAdd4.getText() + "\n");

                if (fileChooser.getFileFilter() != fileChooser.getAcceptAllFileFilter()) {
                    if (!currentFile.getAbsolutePath().endsWith(".ord")) {

                        currentFile = new File(currentFile.getAbsoluteFile() + ".ord");

                    }
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnAdd4ActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        // TODO add your handling code here:
        if (textArea.getText() != null) {
            Object[] options = {"Save",
                "Don't Save",
                "Cancle"};
            int n = JOptionPane.showOptionDialog(this,
                    "Do you want to save changes to Untitles?"
                    + fileChooser.getApproveButtonText(),
                    fileChooser.getApproveButtonToolTipText(),
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[2]);
            if (n == JOptionPane.YES_OPTION) {
                if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    currentFile = fileChooser.getSelectedFile();
                    try (PrintWriter pw = new PrintWriter(currentFile)) {
                        pw.write(textArea.getText());

                        if (!currentFile.getAbsolutePath().endsWith(".ord")) {
                            currentFile = new File(currentFile.getAbsolutePath() + ".ord");
                        }

                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(this,
                                "Unable to write file contents to " + currentFile.getAbsolutePath(),
                                "File access error",
                                JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                } else {
                    dispose();
                }

            } else if (n == JOptionPane.NO_OPTION) {
                dispose();
            }

        }


    }//GEN-LAST:event_miExitActionPerformed

    private void WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_WindowClosing
        // TODO add your handling code here:
        if (textArea.getText() != null) {
            Object[] options = {"Save",
                "Don't Save",
                "Cancle"};
            int n = JOptionPane.showOptionDialog(this,
                    "Do you want to save changes to Untitles?"
                    + fileChooser.getApproveButtonText(),
                    fileChooser.getApproveButtonToolTipText(),
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[2]);
            if (n == JOptionPane.YES_OPTION) {
                if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    currentFile = fileChooser.getSelectedFile();
                    try (PrintWriter pw = new PrintWriter(currentFile)) {
                        pw.write(textArea.getText());

                        if (!currentFile.getAbsolutePath().endsWith(".ord")) {
                            currentFile = new File(currentFile.getAbsolutePath() + ".ord");
                        }

                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(this,
                                "Unable to write file contents to " + currentFile.getAbsolutePath(),
                                "File access error",
                                JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                } else {
                    dispose();
                }

            } else if (n == JOptionPane.NO_OPTION) {
                dispose();
            }

        }

    }//GEN-LAST:event_WindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quiz1IceCreamSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quiz1IceCreamSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quiz1IceCreamSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quiz1IceCreamSelector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Quiz1IceCreamSelector().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnAdd2;
    private javax.swing.JButton btnAdd3;
    private javax.swing.JButton btnAdd4;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox ckChocolate;
    private javax.swing.JCheckBox ckSprinkle;
    private javax.swing.JComboBox<String> dlType;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser fileChooserOpen;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lblOrders;
    private javax.swing.JLabel lblScopeSize;
    private javax.swing.JLabel lblTopping;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miLoadFlavours;
    private javax.swing.JMenuItem miSaveOrder;
    private javax.swing.JRadioButton rbLarge;
    private javax.swing.JRadioButton rbSmall;
    private javax.swing.JRadioButton rbmedium;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}
