
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Elmira
 */
public class JNotePadEli extends javax.swing.JFrame {

    File currentFile;
    boolean isModified;

    /**
     * Creates new form JNotePadEli
     */
    public JNotePadEli() {
        initComponents();
        // center window on the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        // handler for document modifications
        textArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                docModified(true);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                docModified(true);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                docModified(true);
            }
        });
        // handler for window closing
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {
                jmExitActionPerformed(null);
            }
        });
    }

    private void docModified(boolean is) {
        isModified = is;
        if (is) {
            setTitle("(document modified)");
        } else {
            setTitle("");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        jScrollBar1 = new javax.swing.JScrollBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmNew = new javax.swing.JMenuItem();
        jmOpen = new javax.swing.JMenuItem();
        jmSaveAs = new javax.swing.JMenuItem();
        jmSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmExit = new javax.swing.JMenuItem();
        jmClose = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        ckbWordWrap = new javax.swing.JCheckBoxMenuItem();
        ckbColor = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Note pad");
        setLocation(new java.awt.Point(45, 45));
        setMaximumSize(new java.awt.Dimension(214748, 214748));
        setMinimumSize(new java.awt.Dimension(150, 150));
        setPreferredSize(new java.awt.Dimension(2590, 1120));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                JNotePadEli.this.windowClosing(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        lblStatus.setText("(no File)");
        jPanel1.add(lblStatus, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(jScrollBar1, java.awt.BorderLayout.LINE_END);

        jMenu1.setText("File");

        jmNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jmNew.setText("New");
        jmNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmNewActionPerformed(evt);
            }
        });
        jMenu1.add(jmNew);

        jmOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmOpen.setText("Open");
        jmOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jmOpen);

        jmSaveAs.setText("Save As...");
        jmSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(jmSaveAs);

        jmSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jmSave.setText("Save");
        jmSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jmSave);
        jMenu1.add(jSeparator1);

        jmExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jmExit.setText("Exit");
        jmExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmExitActionPerformed(evt);
            }
        });
        jMenu1.add(jmExit);

        jmClose.setText("Close");
        jmClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCloseActionPerformed(evt);
            }
        });
        jMenu1.add(jmClose);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Format");

        ckbWordWrap.setSelected(true);
        ckbWordWrap.setText("Word Wrap");
        ckbWordWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbWordWrapActionPerformed(evt);
            }
        });
        jMenu3.add(ckbWordWrap);

        ckbColor.setText("ColorChange");
        ckbColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbColorActionPerformed(evt);
            }
        });
        jMenu3.add(ckbColor);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    class MyCustomFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File currentFile) {
            // Allow only directories, or files with ".txt" extension
            return currentFile.isDirectory() || currentFile.getAbsolutePath().endsWith(".txt");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,

            return "Text documents (*.txt)";
        }
    }


    private void jmSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSaveActionPerformed
        // TODO add your handling code here:
 if (currentFile != null) {
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
                docModified(false);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            jmSaveAsActionPerformed(null);
        }
    }//GEN-LAST:event_jmSaveActionPerformed

    private void jmCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCloseActionPerformed
        // TODO add your handling code here:
        currentFile = null;
        textArea.setText("");
    }//GEN-LAST:event_jmCloseActionPerformed

    private void jmSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSaveAsActionPerformed
        doSaveAction();

    }//GEN-LAST:event_jmSaveAsActionPerformed

    private void jmOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmOpenActionPerformed
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                currentFile = fileChooser.getSelectedFile();
                // FIXME: what happens if we can't read the file?
                String content = new Scanner(currentFile).useDelimiter("\\Z").next();
                textArea.setText(content);
                lblStatus.setText("Current file: " + currentFile.getAbsolutePath());
            } catch (IOException ex) {
                currentFile = null;
                JOptionPane.showMessageDialog(this,
                        "Unable to read file contents from " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

    }//GEN-LAST:event_jmOpenActionPerformed

    private boolean doSaveAction() {
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile();
            // FIXME: what if user selected "All files" filter?
            if (fileChooser.getFileFilter() != fileChooser.getAcceptAllFileFilter()) {
                if (!currentFile.getName().toLowerCase().endsWith(".txt")) {
                    currentFile = new File(currentFile.getAbsolutePath() + ".txt");
                }
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
                docModified(false);
                lblStatus.setText(currentFile.getAbsolutePath());
                return true;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
        return false;
    }
    private void jmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmExitActionPerformed
         if (isModified) {
            Object[] options = {"Save",
                "Discard changes",
                "Cancel"};
            int choice = JOptionPane.showOptionDialog(this,
                    "Would you like to save changes before closing?",
                    "Unsaved changes to current file",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[2]);
            //
            switch (choice) {
                case JOptionPane.YES_OPTION:
                    if (doSaveAction()) {
                        dispose();
                    }
                    break;
                case JOptionPane.NO_OPTION:
                    dispose();
                    break;
                case JOptionPane.CANCEL_OPTION:
                default:
            }
        } else { // not modified - close window
            dispose();
        }
    }//GEN-LAST:event_jmExitActionPerformed

    private void jmNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmNewActionPerformed
        // TODO add your handling code here:
        textArea.setText(" ");
        setTitle("Untitled");
    }//GEN-LAST:event_jmNewActionPerformed

    private void ckbWordWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbWordWrapActionPerformed
        // TODO add your handling code here:
        if (ckbWordWrap.isSelected()) {
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(true);
        } else {
            textArea.setLineWrap(false);

            textArea.setWrapStyleWord(false);
        }

    }//GEN-LAST:event_ckbWordWrapActionPerformed

    private void ckbColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbColorActionPerformed
        // TODO add your handling code here:
        Color newColor = JColorChooser.showDialog(
                textArea,
                "Choose Background Color",
                textArea.getBackground());
        if (newColor != null) {
            textArea.setBackground(newColor);
        }
    }//GEN-LAST:event_ckbColorActionPerformed

    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        // TODO add your handling code here:

        if (textArea.getText() != null) {
            Object[] options = {"Save",
                "Don't Save",
                "Cancle"};
            int n = JOptionPane.showOptionDialog(this,
                    "Do you want to save changes to Untitles?"
                    + fileChooser.getApproveButtonText(),
                    fileChooser.getApproveButtonToolTipText(),
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[2]);
            if (n == JOptionPane.YES_OPTION) {
                if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    currentFile = fileChooser.getSelectedFile();
                    try (PrintWriter pw = new PrintWriter(currentFile)) {
                        pw.write(textArea.getText());
                        //  FileNameExtensionFilter ft = new FileNameExtensionFilter("Text Files", "txt");
                        //  fileChooser.addChoosableFileFilter(ft);
                        //    fileChooser.setAcceptAllFileFilterUsed(false);
                        if (!currentFile.getAbsolutePath().endsWith(".txt")) {
                            //  fileChooser.setAcceptAllFileFilterUsed(false);
                            currentFile = null;
                            JOptionPane.showMessageDialog(this,
                                    "wrong extension you have to use '.txt'",
                                    "wrong ext",
                                    JOptionPane.WARNING_MESSAGE);

                        }

                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(this,
                                "Unable to write file contents to " + currentFile.getAbsolutePath(),
                                "File access error",
                                JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                }

            } else if (n == JOptionPane.NO_OPTION) {
                dispose();
            }

        }


    }//GEN-LAST:event_windowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JNotePadEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JNotePadEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JNotePadEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JNotePadEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JNotePadEli().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ckbColor;
    private javax.swing.JCheckBoxMenuItem ckbWordWrap;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem jmClose;
    private javax.swing.JMenuItem jmExit;
    private javax.swing.JMenuItem jmNew;
    private javax.swing.JMenuItem jmOpen;
    private javax.swing.JMenuItem jmSave;
    private javax.swing.JMenuItem jmSaveAs;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
